{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Scheduler is a timetable generator based on the answer set programming solver clingo. It is written to be highly customizable. This documentation provides an overview over the available options.</p>"},{"location":"#usage","title":"Usage","text":"<p>Given a configuration file <code>configuration.lp</code>, run the following command.</p> <pre><code>clingo --models=0 \\\n    src/main/base/primitives.lp \\\n    src/main/base/running_balance.lp \\\n    src/main/base/ordering.lp \\\n    src/main/inversions.lp \\\n    src/main/penalties.lp \\\n    src/main/schedule.lp \\\n    configuration.lp\n</code></pre> <p>Save the result as <code>models.log</code>.</p> <p>The following command to extract the last (current best) model, convert it to csv, and sort it.</p> <pre><code>awk -f ./src/extract/extract_models.awk models.log \\\n    | tail -n 1 \\\n    | ./src/extract/model_to_csv.bash \\\n    | ./src/extract/sort_csv.bash\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>To configure what scheduler should schedule reference configuration. To configure how the scheduler should schedule view inversions.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>The configuration is a set of statements and rules written as logic program. There are a few predefined predicates, with a given semantic.</p> <ul> <li><code>area/1.</code></li> <li><code>beginarea/1.</code></li> <li><code>endarea/1.</code></li> <li><code>coretimeslot/1.</code></li> <li><code>area_blockminquarterhours/2.</code></li> <li><code>area_blockmaxquarterhours/2.</code></li> <li><code>area_dailyminquarterhours/2.</code></li> <li><code>area_dailymaxquarterhours/2.</code></li> <li><code>area_weeklyminquarterhours/2.</code></li> <li><code>area_weeklymaxquarterhours/2.</code></li> <li><code>weeklyminquarterhours/1.</code></li> <li><code>weeklymaxquarterhours/1.</code></li> <li><code>fixedslot_area/2.</code></li> <li><code>fluidarea_weight/2.</code></li> <li><code>isonsameday_area_area/2.</code></li> <li><code>beforeearea_area/2.</code></li> <li><code>preparationarea_area/2.</code></li> <li><code>reviewarea_area/2.</code></li> </ul> <p>Their semantic is defined below.</p> <p>Some use a slot as argument. A slot is a 3-tuple, consisting of the day, the hour and the ordinal number of the quarterhour. Therefore, the timeslot Tuesday, 13:30 \u2013 13:45 is denoted with <code>(tuesday,13,2)</code>.</p> <p>A minimal configuration consists of at least one <code>area/1.</code> statement. However, such a configuration would not return a very interesting schedule.</p>"},{"location":"configuration/#area1","title":"<code>area/1.</code>","text":"<p>The predicate <code>area/1.</code> indicates that its first argument is an area that can, or cannot be scheduled.</p>  Example   <pre><code>% My areas of concerns\narea(morning_routine).\n\narea(writing_reports).\narea(programming).\narea(improve_workflow).\n\narea(reading_manuals).\narea(producing_widgets).\n\narea(pre_stand_up_meeting).\narea(stand_up_meeting).\narea(post_stand_up_meeting).\n\narea(evening_review).\n</code></pre>"},{"location":"configuration/#beginarea1","title":"<code>beginarea/1.</code>","text":"<p>The predicate <code>beginarea/1.</code> indicates that its first argument is the begin area. The begin area has to be scheduled first on every day.</p>  Example   <pre><code>% Start with the morning routine\nbeginarea(morning_routine).\n</code></pre>"},{"location":"configuration/#endarea1","title":"<code>endarea/1.</code>","text":"<p>The predicate <code>endarea/1.</code> indicates that its first argument is the end area. The end area has to be scheduled last on every day.</p>  Example   <pre><code>% Do the evening review last\nendarea(evening_review).\n</code></pre>"},{"location":"configuration/#coretimeslot1","title":"<code>coretimeslot/1.</code>","text":"<p>The predicate <code>coretimeslot/1.</code> indicates that its first argument is a core time slot. A core time slot is a slot that has to have an area scheduled. Therfore, <code>slot_area/2.</code> will hold for some area on this slot.</p>  Tip    This can be used to set a fixed worktime schedule, or which hours in a flexi-time agreement have to be attended.    Example   <pre><code>% Monday to Thursday I have to work between 11:00 and 14:00\ncoretimeslot(Slot) :-\n    slot(Slot), Slot = (Day,Hour,Quarterhour),\n    Day != friday,\n    11 &lt;= Hour, Hour &lt; 14.\n% Fridays from 11:00 to 13:30\ncoretimeslot(Slot) :-\n    slot(Slot), Slot = (Day,Hour,Quarterhour),\n    Day = friday,\n    11 &lt;= Hour, Hour &lt; 13.\ncoretimeslot(Slot) :-\n    slot(Slot), Slot = (Day,Hour,Quarterhour),\n    Day = friday,\n    Hour = 13,\n    0 &lt;= Quarterhour, Quarterhour &lt;= 1.\n</code></pre>"},{"location":"configuration/#area_blockminquarterhours2","title":"<code>area_blockminquarterhours/2.</code>","text":"<p>The predicate <code>area_blockminquarterhours/2.</code> indicates that its first argument is an area with a minimum block size in the second argument. Therefore, if the area is scheduled for a slot, then at least the minimum number of slots that follow is the second argument minus one.</p>  Example   <pre><code>% A block of programming should be at least an hour\narea_blockminquarterhours(programming,1*4).\n</code></pre>"},{"location":"configuration/#area_blockmaxquarterhours2","title":"<code>area_blockmaxquarterhours/2.</code>","text":"<p>The predicate <code>area_blockmaxquarterhours/2.</code> indicates that its first argument is an area that with a maximum block size in the second argument. Therefore, if the area is scheduled for a slot, then at most the maximum number of slots that follow is the second argument minus one.</p>  Example   <pre><code>% A block of writing reports should at most be two hours\narea_blockmaxquarterhours(writing_reports,2*4).\n</code></pre>"},{"location":"configuration/#area_dailyminquarterhours2","title":"<code>area_dailyminquarterhours/2.</code>","text":"<p>The predicate <code>area_minquarterhours/2.</code> indicates that its first argument is an area with a minimum number of quarterhours in the second argument applicable for each day. Therefore, the area is scheduled at least that many quarterhours for each day.</p>  Example   <pre><code>% On each day, I should program three and a half hours\narea_dailyminquarterhours(programming,3*4 + 2).\n</code></pre>"},{"location":"configuration/#area_dailymaxquarterhours2","title":"<code>area_dailymaxquarterhours/2.</code>","text":"<p>The predicate <code>area_maxquarterhours/2.</code> indicates that its first argument is an area with a maximum number of quarterhours in the second argument, applicable for each day. Therefore, the area is scheduled at most that many quarterhours for each day.</p>  Example   <pre><code>% On each day, I should improve my workflow no longer than one hour\narea_dailymaxquarterhours(improve_workflow,1*4).\n</code></pre>"},{"location":"configuration/#area_weeklyminquarterhours2","title":"<code>area_weeklyminquarterhours/2.</code>","text":"<p>The predicate <code>area_weeklyminquarterhours/2.</code> indicates that its first argument is an area with a minimum number of quarterhours in the second argument, applicable for the whole week. Therefore, the area is scheduled at least that many quarterhours during the whole week.</p>  Example   <pre><code>% During the week, I usually need to write six hours of reports\narea_weeklyminquarterhours(writing_reports,6*4).\n</code></pre>"},{"location":"configuration/#area_weeklymaxquarterhours2","title":"<code>area_weeklymaxquarterhours/2.</code>","text":"<p>The predicate <code>area_weeklymaxquarterhours/2.</code> indicates that its first argument is an area with a maximum number of quarterhours in the second argument. Therefore, the area is scheduled at most that many quarterhours during the whole week.</p>  Example   <pre><code>% During the week, I usually want to improve my workflow for at most four hours\narea_weeklymaxquarterhours(improve_workflow,4*4).\n</code></pre>"},{"location":"configuration/#weeklyminquarterhours1","title":"<code>weeklyminquarterhours/1.</code>","text":"<p>The predicate <code>weeklyminquarterhours/1.</code> indicates that its argument is the minimum number of quarterhours that have to be scheduled for the week.</p>  Example   <pre><code>% I have a 38.5h work week\nweeklyminquarterhours(38*4 + 2).\n</code></pre>"},{"location":"configuration/#weeklymaxquarterhours1","title":"<code>weeklymaxquarterhours/1.</code>","text":"<p>The predicate <code>weeklymaxquarterhours/1.</code> indicates that its argument is the maximum number of quarterhours that have to scheduled for the week.</p>  Example   <pre><code>% I don't want to do more than two hours of overtime\nweeklymaxquarterhours(Min + 2*4) :-\n    weeklyminquarterhours(Min).\n</code></pre>"},{"location":"configuration/#fixedslot_area2","title":"<code>fixedslot_area/2.</code>","text":"<p>The predicate <code>fixedslot_area/2.</code> indicates that its second argument is an area that can only be scheduled for time slots that appear as first argument.</p>  Example   <pre><code>% On Mondays at 10:00 we have a stand-up meeting for thirty minutes.\nfixedslot_area((monday, 10, 0), standup_meeting).\nfixedslot_area((monday, 10, 1), standup_meeting).\n</code></pre>"},{"location":"configuration/#fluidarea_weight2","title":"<code>fluidarea_weight/2.</code>","text":"<p>The predicate <code>fluidarea_weight/2.</code> indicates that its first argument is an area that should be allocated as much slots as are available according to the weight given as the second argument. The accuracy of said weighting can be configured by setting the constant <code>fluidbuffer</code> which is <code>2</code> by default.</p>  Example   <pre><code>% About 2/3 of my time should be allocated to producing widgets\nfluidarea_weight(producing_widgets,2).\n% About 1/3 of my time should be allocated to reading manuals.\nfluidarea_weight(reading_manuals,1).\n</code></pre>"},{"location":"configuration/#isonsameday_area_area2","title":"<code>isonsameday_area_area/2.</code>","text":"<p>The predicate <code>isonsameday_area_area/2.</code> indicates that its first argument and its second argument are areas that should be allocated on the same day. This is usually declared implicitly via <code>preparationarea_area/2.</code> or <code>area_reviewarea/2</code>.</p>"},{"location":"configuration/#beforearea_area2","title":"<code>beforearea_area/2.</code>","text":"<p>The predicate <code>beforearea_area/2.</code> indicates that its first argument is an area that needs to be scheduled before its second argument. Beware however, that every allocation of the first argument is a valid before for every subsequent allocation of the second argument. This is usually declared implicitly via <code>preparationarea_area/2.</code> or <code>area_reviewarea/2</code>.</p>"},{"location":"configuration/#preparationarea_area2","title":"<code>preparationarea_area/2.</code>","text":"<p>The predicate <code>preparationarea_area/2.</code> indicates that its first argument is an area that is a preparation area of its second argument. A preparation area is to be scheduled on the same day and in an earlier timeslot than its counterpart. Incidentally, it is implemented with <code>isonsameday_area_area/2.</code> and <code>beforearea_area/2.</code>. Thus it is also best to split day specific instances of an area into their day variants.</p>  Example   <pre><code>% Before the stand-up meeting I want to prepare\npreparationarea_area(pre_standup_meeting,standupmeeting).\n</code></pre>"},{"location":"configuration/#reviewarea_area2","title":"<code>reviewarea_area/2.</code>","text":"<p>The predicate <code>reviewarea_area/2.</code> indicates that its first argument is an area that is a review area of its second argument. A review area is to be scheduled on the same day and in an later timeslot than its counterpart. Incidentally, it is implemented with <code>isonsameday_area_area/2.</code> and <code>beforearea_area/2.</code>. Thus it is also best to split day specific instances of an area into their day variants.</p>  Example   <pre><code>% After the stand-up meeting I want to review\nreviewarea_area(post_standup_meeting,standupmeeting).\n</code></pre>"},{"location":"inversions/","title":"Inversions","text":"<p>Inversions describe how bad (or good) a given schedule is. These are separated into levels and have associated scales, both of which are subject to configuration.</p> <p>The following are supported:</p> <p>name</p> <p>default level</p> <p>default scale</p> <p><code>fixed_slots</code></p> <p>22</p> <p>1</p> <p><code>beginarea_not_present</code></p> <p>21</p> <p>1</p> <p><code>endarea_not_present</code></p> <p>21</p> <p>1</p> <p><code>beginarea_not_first</code></p> <p>20</p> <p>1</p> <p><code>endarea_not_last</code></p> <p>20</p> <p>1</p> <p><code>coretimeslot_absent</code></p> <p>19</p> <p>1</p> <p><code>overbooked</code></p> <p>18</p> <p>1</p> <p><code>underbooked</code></p> <p>18</p> <p>1</p> <p><code>area_overbooked</code></p> <p>17</p> <p>1</p> <p><code>area_underbooked</code></p> <p>17</p> <p>1</p> <p><code>area_day_overbooked</code></p> <p>16</p> <p>1</p> <p><code>area_day_underbooked</code></p> <p>16</p> <p>1</p> <p><code>beforearea_not_before</code></p> <p>15</p> <p>1</p> <p><code>areas_not_on_same_day</code></p> <p>14</p> <p>1</p> <p><code>endarea_too_late</code></p> <p>-10</p> <p>1</p> <p><code>beginarea_too_early</code></p> <p>-11</p> <p>1</p> <p><code>linear_endarea_too_late</code></p> <p>-12</p> <p>1</p> <p><code>linear_beginarea_too_early</code></p> <p>-13</p> <p>1</p> <p><code>fluidarea_overbooked</code></p> <p>-14</p> <p>1</p> <p><code>fluidarea_underbooked</code></p> <p>-14</p> <p>1</p> <p><code>area_day_context_fragmentation</code></p> <p>-15</p> <p>1</p> <p><code>area_day_context_saturation</code></p> <p>-15</p> <p>1</p> <p><code>preparationarea_too_early</code></p> <p>-16</p> <p>1</p> <p><code>reviewarea_too_late</code></p> <p>-16</p> <p>1</p>  Info    By convention all levels above 0 are hard requirements, while 0 and below are soft requirements. Keep in mind that this is not enforced, all levels are implemented as soft requirements.   <p>Each inversion has two constants associated with them. One is has the <code>level_</code> prefix and the other the <code>scale_</code> prefix. <code>level_</code> defines in what order the scheduler tries to minimize inversion. For each level it tries to set the value as low as possible (and proof it is the lowest possible value), and then move to the next value.</p>  Tip    Assigning the levels such that the least constraint has the highest level and most constraint has the lowest is usually the most performant. Keep in mind that this changes the semantic of the schedule."},{"location":"inversions/#fixed_slots","title":"<code>fixed_slots</code>","text":"<p>Counts the difference between <code>fixedslot_area/2.</code> and <code>slot_area/2.</code> that have at least one element in common.</p>"},{"location":"inversions/#beginarea_not_present","title":"<code>beginarea_not_present</code>","text":"<p>Counts the number of days where there is no slot for which the relation <code>slot_area/2.</code> has an area that is also in <code>beginarea/1.</code>.</p>"},{"location":"inversions/#endarea_not_present","title":"<code>endarea_not_present</code>","text":"<p>Counts the number of days where there is no slot for which the relation <code>slot_area/2.</code> has an area that is also in <code>endarea/1.</code>.</p>"},{"location":"inversions/#beginarea_not_first","title":"<code>beginarea_not_first</code>","text":"<p>Counts the number of days where there is any slot before another slot which the relation <code>slot_area/2.</code> has an area that is also in <code>beginarea/1.</code>.</p>"},{"location":"inversions/#endarea_not_last","title":"<code>endarea_not_last</code>","text":"<p>Counts the number of days where there is any slot before another slot which the relation <code>slot_area/2.</code> has an area that is also in <code>endarea/1.</code>.</p>"},{"location":"inversions/#coretimeslot_absent","title":"<code>coretimeslot_absent</code>","text":"<p>Counts the number of slots that are in <code>coretimeslot/1.</code> but are not in <code>slot_area/2.</code>.</p>"},{"location":"inversions/#overbooked","title":"<code>overbooked</code>","text":"<p>Counts the number of slots that are in <code>slot_area/2.</code>, beyond <code>weeklymaxquarterhours/1.</code>.</p>"},{"location":"inversions/#underbooked","title":"<code>underbooked</code>","text":"<p>Counts the number of slots that are in <code>slot_area/2.</code>, below <code>weeklyminquarterhours/1.</code>.</p>"},{"location":"inversions/#area_overbooked","title":"<code>area_overbooked</code>","text":"<p>Counts the number of slots that are in <code>slot_area/2.</code> and for each area that is also in <code>area_weeklymaxquarterhours/2.</code> and beyond the value of the second argument.</p>"},{"location":"inversions/#area_underbooked","title":"<code>area_underbooked</code>","text":"<p>Counts the number of slots that are in <code>slot_area/2.</code> and for each area that is also in <code>area_weeklyminquarterhours/2.</code> and below the value of the second argument.</p>"},{"location":"inversions/#area_day_overbooked","title":"<code>area_day_overbooked</code>","text":"<p>Counts the number of slots in a day that are in <code>slot_area/2.</code> and for each area that is also in <code>area_dailymaxquarterhours/2.</code> and beyond the value of the second argument.</p>"},{"location":"inversions/#area_day_underbooked","title":"<code>area_day_underbooked</code>","text":"<p>Counts the number of slots in a day that are in <code>slot_area/2.</code> and for each area that is also in <code>area_dailyminquarterhours/2.</code> and below the value of the second argument.</p>"},{"location":"inversions/#beforearea_not_before","title":"<code>beforearea_not_before</code>","text":"<p>Counts the number of slots in <code>slot_area/2.</code> where an area that is in the first argument of <code>beforearea_area/2.</code>, does not precede the slot that is in the second argument.</p>"},{"location":"inversions/#areas_not_on_same_day","title":"<code>areas_not_on_same_day</code>","text":"<p>Counts the number of slots in <code>slot_area/2.</code> where an area that is an argument of <code>isonsameday_area_area/2.</code> but there is no slot on the same day that is also in the same predicate.</p>"},{"location":"inversions/#endarea_too_late","title":"<code>endarea_too_late</code>","text":"<p>Counts the number of slots in <code>slot_area/2.</code> that are after the end of the slots that are in <code>coretimeslot/1.</code>, or if that is not present after the very first timeslot.</p>"},{"location":"inversions/#beginarea_too_early","title":"<code>beginarea_too_early</code>","text":"<p>Counts the number of slots in <code>slot_area/2.</code> that are before the beginning of the slots that are in <code>coretimeslot/1.</code>, or if that is not present before the very last timeslot.</p>"},{"location":"inversions/#linear_endarea_too_late","title":"<code>linear_endarea_too_late</code>","text":"<p>Similar to <code>endarea_too_late</code>, however each successive timeslot is weighted linearly higher.</p>  Note    This encodes the preference that a specific day should end as early as possible. For example staying two quarterhours longer is less desireable (penalty = 1 + 2) than staying one quarterhour on one day and another one on another (penalty = 1 + 1)."},{"location":"inversions/#linear_beginarea_too_early","title":"<code>linear_beginarea_too_early</code>","text":"<p>Similar to <code>beginarea_too_early</code>, however each successive timeslot is weighted linearly higher.</p>  Note    This encodes the preference that a specific day should begin as late as possible. For example coming in two quarterhours earlier is less desireable (penalty = 1 + 2) than staying one quarterhour on one day and another one on another (penalty = 1 + 1)."},{"location":"inversions/#fluidarea_overbooked","title":"<code>fluidarea_overbooked</code>","text":"<p>Counts the number of slots in <code>slot_area/2.</code> with an area in <code>fluidarea_weight/2.</code> where the number of slots is greater than the allocated weight. The margin depends on the constant <code>fluidbuffer</code>.</p>"},{"location":"inversions/#fluidarea_underbooked","title":"<code>fluidarea_underbooked</code>","text":"<p>Counts the number of slots in <code>slot_area/2.</code> with an area in <code>fluidarea_weight/2.</code> where the number of slots is less than the allocated weight. The margin depends on the constant <code>fluidbuffer</code>.</p>"},{"location":"inversions/#area_day_context_fragmentation","title":"<code>area_day_context_fragmentation</code>","text":"<p>Counts the number of slots in <code>slot_area/2.</code> with an area in <code>area_blockminquarterhours/2.</code>, where the number of succeeding slots with the same area is less than the minimum number in the second argument.</p>  Example    Given the following configuration:  <pre><code>area(a).\narea_blockminquarterhours(a,2).\n\nslot_area((monday,8,0),a).\n\n% ...\n\nslot_area((monday,12,0),a).\nslot_area((monday,12,1),a).\nslot_area((monday,12,2),a).\n</code></pre>  Would result in exactly one inversion because the block during 8:00 \u2013 8:15 is too short, while the block during 12:00 \u2013 12:45 is long enough."},{"location":"inversions/#area_day_context_saturation","title":"<code>area_day_context_saturation</code>","text":"<p>Counts the number of slots in <code>slot_area/2.</code> with an area in <code>area_blockmaxquarterhours/2.</code>, where the number of succeeding slots with the same area is greater than the maximum number in the second argument. See also <code>area_day_context_fragmentation</code>.</p>"},{"location":"inversions/#preparationarea_too_early","title":"<code>preparationarea_too_early</code>","text":"<p>Counts the distance between two slots in <code>slot_area/2.</code> with two distinct areas, where both are in <code>preparationarea_area/2.</code> respectively.</p>"},{"location":"inversions/#reviewarea_too_late","title":"<code>reviewarea_too_late</code>","text":"<p>Counts the distance between two slots in <code>slot_area/2.</code> with two distinct areas, where both are in <code>reviewarea_area/2.</code> respectively.</p>"}]}